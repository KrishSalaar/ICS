<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gas Simulation</title>
  <style>
    canvas {
      border: 1px solid black;
      display: block;
    }
    .info {
      display: flex;
      justify-content: space-between;
      margin-top: 10px;
    }
    .info div {
      width: 45%;
    }
    .equation-box {
      border: 1px solid black;
      padding: 10px;
      background-color: #f0f0f0;
    }
  </style>
</head>
<body>
  <canvas id="simulationCanvas" width="600" height="400"></canvas>
  <div class="info">
    <div id="temperatureBox">Temperature: 0 K</div>
    <div class="equation-box">
      <strong>Kinetic Theory of Gases</strong><br>
      <p>The temperature is related to the average kinetic energy:</p>
      <p>\( T = \frac{2}{3k_B} \langle KE \rangle \)</p>
      <p>Where:</p>
      <ul>
        <li>\( T \): Temperature</li>
        <li>\( k_B \): Boltzmann constant</li>
        <li>\( \langle KE \rangle \): Average kinetic energy per molecule</li>
      </ul>
    </div>
  </div>
  <script>
    const canvas = document.getElementById('simulationCanvas');
    const ctx = canvas.getContext('2d');

    const width = canvas.width;
    const height = canvas.height;

    const molecules = [];
    const numMolecules = 50;
    const heliumMass = 4.0026 * 1.66e-27; // kg (mass of helium nucleus)
    const boltzmannConstant = 1.38e-23; // J/K

    class Molecule {
      constructor(x, y, vx, vy) {
        this.x = x;
        this.y = y;
        this.vx = vx;
        this.vy = vy;
        this.radius = 5; // Size of molecule
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'blue';
        ctx.fill();
        ctx.closePath();
      }

      updatePosition() {
        this.x += this.vx;
        this.y += this.vy;

        // Reflect off walls
        if (this.x - this.radius < 0 || this.x + this.radius > width) {
          this.vx *= -1;
        }
        if (this.y - this.radius < 0 || this.y + this.radius > height) {
          this.vy *= -1;
        }
      }

      applyVanDerWaals(other) {
        const dx = other.x - this.x;
        const dy = other.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < this.radius * 4 && distance > 0) {
          const force = (24 * (2 / Math.pow(distance, 13) - 1 / Math.pow(distance, 7)));
          const fx = force * (dx / distance);
          const fy = force * (dy / distance);
          
          this.vx -= fx / heliumMass;
          this.vy -= fy / heliumMass;

          other.vx += fx / heliumMass;
          other.vy += fy / heliumMass;
        }
      }
    }

    function initializeMolecules() {
      for (let i = 0; i < numMolecules; i++) {
        const x = Math.random() * (width - 20) + 10;
        const y = Math.random() * (height - 20) + 10;
        const vx = (Math.random() - 0.5) * 2;
        const vy = (Math.random() - 0.5) * 2;
        molecules.push(new Molecule(x, y, vx, vy));
      }
    }

    function calculateTemperature() {
      let totalKineticEnergy = 0;
      for (const molecule of molecules) {
        const speedSquared = molecule.vx ** 2 + molecule.vy ** 2;
        totalKineticEnergy += 0.5 * heliumMass * speedSquared;
      }

      const averageKineticEnergy = totalKineticEnergy / molecules.length;
      const temperature = (2 / (3 * boltzmannConstant)) * averageKineticEnergy;
      return temperature;
    }

    function update() {
      ctx.clearRect(0, 0, width, height);

      // Update positions and apply forces
      for (let i = 0; i < molecules.length; i++) {
        molecules[i].updatePosition();
        for (let j = i + 1; j < molecules.length; j++) {
          molecules[i].applyVanDerWaals(molecules[j]);
        }
        molecules[i].draw();
      }

      // Update temperature
      const temperature = calculateTemperature();
      document.getElementById('temperatureBox').innerText = `Temperature: ${temperature.toFixed(2)} K`;

      requestAnimationFrame(update);
    }

    initializeMolecules();
    update();
  </script>
</body>
</html>
