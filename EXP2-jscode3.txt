<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gravitational Particle Simulation</title>
  <style>
    canvas {
      border: 1px solid black;
      display: block;
    }
    .controls {
      margin-top: 10px;
    }
    .info {
      margin-top: 10px;
      border: 1px solid black;
      padding: 10px;
      background-color: #f0f0f0;
    }
  </style>
</head>
<body>
  <canvas id="simulationCanvas" width="600" height="400"></canvas>
  <div class="controls">
    <label for="gravitationalConstant">Gravitational Constant: </label>
    <input type="number" id="gravitationalConstant" value="1" step="0.1">
    <label for="initialVelocity">Initial Velocity: </label>
    <input type="number" id="initialVelocity" value="1" step="0.1">
    <button id="resetButton">Reset</button>
  </div>
  <div class="info" id="energyInfo">
    <strong>System Energies</strong><br>
    <p>Kinetic Energy: 0</p>
    <p>Potential Energy: 0</p>
  </div>
  <script>
    const canvas = document.getElementById('simulationCanvas');
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;

    let gravitationalConstant = parseFloat(document.getElementById('gravitationalConstant').value);
    let initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
    const particles = [];
    const numParticles = 10;
    const particleMass = 1;

    class Particle {
      constructor(x, y, vx, vy) {
        this.x = x;
        this.y = y;
        this.vx = vx;
        this.vy = vy;
        this.radius = 5;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'blue';
        ctx.fill();
        ctx.closePath();
      }

      updatePosition() {
        this.x += this.vx;
        this.y += this.vy;
      }

      applyGravitationalForce(other) {
        const dx = other.x - this.x;
        const dy = other.y - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance > 0) {
          const force = (gravitationalConstant * particleMass * particleMass) / (distance * distance);
          const fx = force * (dx / distance);
          const fy = force * (dy / distance);

          this.vx += fx / particleMass;
          this.vy += fy / particleMass;
          other.vx -= fx / particleMass;
          other.vy -= fy / particleMass;
        }
      }
    }

    function initializeParticles() {
      particles.length = 0;
      for (let i = 0; i < numParticles; i++) {
        const x = Math.random() * width;
        const y = Math.random() * height;
        const vx = (Math.random() - 0.5) * initialVelocity;
        const vy = (Math.random() - 0.5) * initialVelocity;
        particles.push(new Particle(x, y, vx, vy));
      }
    }

    function calculateEnergies() {
      let kineticEnergy = 0;
      let potentialEnergy = 0;

      for (let i = 0; i < particles.length; i++) {
        const p1 = particles[i];
        kineticEnergy += 0.5 * particleMass * (p1.vx ** 2 + p1.vy ** 2);

        for (let j = i + 1; j < particles.length; j++) {
          const p2 = particles[j];
          const dx = p2.x - p1.x;
          const dy = p2.y - p1.y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance > 0) {
            potentialEnergy -= (gravitationalConstant * particleMass * particleMass) / distance;
          }
        }
      }

      document.getElementById('energyInfo').innerHTML = `
        <strong>System Energies</strong><br>
        <p>Kinetic Energy: ${kineticEnergy.toFixed(2)}</p>
        <p>Potential Energy: ${potentialEnergy.toFixed(2)}</p>
      `;
    }

    function update() {
      ctx.clearRect(0, 0, width, height);

      for (let i = 0; i < particles.length; i++) {
        particles[i].updatePosition();
        for (let j = i + 1; j < particles.length; j++) {
          particles[i].applyGravitationalForce(particles[j]);
        }
        particles[i].draw();
      }

      calculateEnergies();
      requestAnimationFrame(update);
    }

    document.getElementById('resetButton').addEventListener('click', () => {
      gravitationalConstant = parseFloat(document.getElementById('gravitationalConstant').value);
      initialVelocity = parseFloat(document.getElementById('initialVelocity').value);
      initializeParticles();
    });

    initializeParticles();
    update();
  </script>
</body>
</html>
